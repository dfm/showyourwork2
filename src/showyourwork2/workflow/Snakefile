# NOTE: These imports will be available in *all* Snakefiles - be somewhat
# careful about what you include here has a result.
from functools import partial
from pathlib import Path

from showyourwork2 import paths, utils
from showyourwork2.paths import package_data
from showyourwork2.config import parse_config
from showyourwork2.rule_order import fix_rule_order
from showyourwork2.logging import patch_snakemake_logging

SYW__PROJECT_ROOT = paths.find_project_root()
workdir: SYW__PROJECT_ROOT

# Parse and validate the configuration; apply defaults
config = parse_config(config, required_version=2)

# Extract some commonly used config values
SYW__DOCUMENTS = config["documents"]
SYW__REPO_PATHS = paths.repo(config)
SYW__WORK_PATHS = paths.work(config)

_artifacts_list = ", ".join(map("'{}'".format, config.get("artifacts", [])))
rule all:
    message:
        f"Generating artifacts: {_artifacts_list}"
    input:
        config.get("artifacts", [])

rule:
    name:
        utils.rule_name("save", "config")
    output:
        "config.json"
    run:
        import json
        with open(output[0], "w") as f:
            json.dump(config, f, indent=2)

# Include the rules from the main showyourwork workflow
include_rules = partial(package_data, "showyourwork2", "workflow", "rules")
include: include_rules("main.smk")
include: include_rules("dependencies.smk")
include: include_rules("static.smk")
include: include_rules("dynamic.smk")
include: include_rules("render.smk")
include: include_rules("plugins.smk")

# Include the rules from any user-defined local Snakefiles
for snakefile in config.get("local_snakefiles", []):
    include: snakefile

# For backwards compatibility, we include the top-level project Snakefile if it
# exists
if (SYW__PROJECT_ROOT / "Snakefile").is_file():
    include: SYW__PROJECT_ROOT / "Snakefile"

# Handle the rule order for ambiguous rules
fix_rule_order(config, workflow)

# Patch the snakemake logger for our purposes
patch_snakemake_logging(config)
